import numpy as np
from math import sqrt


def fill_coordinate_gaps(coordinates, max_dist_between_points):
    """
    Takes an array of 3D coordinates and fills in gaps where the 2D distance
    (based on x and y coordinates) between consecutive points exceeds a threshold.
    Used for gpx Track data that is used to test the racing line algorithms.
    Args:
        coordinates: List of tuples containing (x, y, z) coordinates
        max_dist_between_points: Maximum allowed distance between consecutive points

    Returns:
        A new list with additional points inserted where needed
    """
    # Make sure we have a list to work with
    coordinates = list(coordinates)

    # Sort coordinates if needed (uncomment if you need to sort by x or y)
    # coordinates.sort(key=lambda point: point[0])  # Sort by x-coordinate

    # Continue until no gaps larger than max_dist_between_points remain
    changes_made = True
    while changes_made:
        changes_made = False
        new_coordinates = []

        for i in range(len(coordinates) - 1):
            # Add the current point to the new list
            new_coordinates.append(coordinates[i])

            # Calculate 2D distance between current point and next point
            x1, y1, z1 = coordinates[i]
            x2, y2, z2 = coordinates[i + 1]
            distance = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)

            # If distance exceeds threshold, add a point in between
            if distance > max_dist_between_points:
                # Calculate midpoint
                mid_x = (x1 + x2) / 2
                mid_y = (y1 + y2) / 2
                mid_z = (z1 + z2) / 2

                # Add midpoint to new coordinate list
                new_coordinates.append((mid_x, mid_y, mid_z))
                changes_made = True

        # Add the last point
        new_coordinates.append(coordinates[-1])

        # Update coordinates list for next iteration
        coordinates = new_coordinates

    return coordinates


# Example usage
if __name__ == "__main__":
    sample_coords = [
        (0.0, 0.0, 491.6999969482422),
        (0.2966461181640625, -8.126358032226562, 491.8999938964844),
        (3.26318359375, -16.586685180664062, 492.1000061035156),
        (8.825408935546875, -22.48663330078125, 492.3000030517578),
        (16.538375854492188, -26.271514892578125, 492.6000061035156),
        (30.332733154296875, -27.49603271484375, 492.8999938964844),
        (54.13909912109375, -23.933807373046875, 493.6000061035156),
        (116.73280334472656, -12.57916259765625, 492.8000030517578),
        (130.08216857910156, -8.905593872070312, 492.8000030517578),
        (141.35496520996094, -1.335845947265625, 492.6999969482422),
        (148.177978515625, 4.564117431640625, 492.6999969482422),
        (157.59669494628906, 21.039474487304688, 492.6000061035156),
        (167.01541137695312, 29.16583251953125, 492.6000061035156),
        (178.43653869628906, 33.952606201171875, 492.6000061035156),
        (211.8841094970703, 40.0751953125, 492.5),
        (229.6832733154297, 41.8563232421875, 492.3999938964844),
        (239.2503204345703, 41.63368225097656, 492.3999938964844),
        (250.07814025878906, 38.850677490234375, 492.3999938964844),
        (253.1188201904297, 37.292205810546875, 492.3000030517578),
        (278.33428955078125, 24.15643310546875, 492.3000030517578),
        (289.9779052734375, 22.152679443359375, 492.1999969482422),
        (296.4300994873047, 22.375320434570312, 492.1999969482422),
        (460.77565002441406, 53.099639892578125, 492.8999938964844),
        (619.1139678955078, 83.37867736816406, 491.3999938964844),
        (635.2815246582031, 85.3824462890625, 491.1000061035156),
        (657.2338256835938, 91.28239440917969, 490.5),
        (668.1358032226562, 98.85215759277344, 490.1999969482422),
        (669.841552734375, 112.65583801269531, 490.1000061035156),
        (665.7625885009766, 125.90292358398438, 490.1000061035156),
        (657.2338256835938, 134.9198455810547, 490.0),
        (647.8892669677734, 141.93299865722656, 489.8999938964844),
        (639.0638580322266, 150.504638671875, 489.8999938964844),
        (636.8389587402344, 154.73480224609375, 489.8999938964844),
        (634.0949249267578, 160.18948364257812, 489.8000030517578),
        (632.6116638183594, 168.9837646484375, 489.8000030517578),
        (635.8748321533203, 178.0006866455078, 489.8000030517578),
        (642.9203338623047, 183.3440399169922, 489.6999969482422),
        (654.3414611816406, 184.79119873046875, 489.6999969482422),
        (742.2989501953125, 158.74232482910156, 489.8999938964844),
        (760.1722717285156, 160.41212463378906, 490.0),
        (771.6675567626953, 165.75547790527344, 490.1000061035156),
        (779.5288543701172, 172.2120361328125, 490.1000061035156),
        (787.4643096923828, 182.11952209472656, 490.1999969482422),
        (790.7274932861328, 199.7080841064453, 490.1999969482422),
        (785.9810485839844, 214.7362823486328, 489.8000030517578),
        (781.4570922851562, 220.97019958496094, 489.6000061035156),
        (778.935546875, 224.42112731933594, 489.5),
        (772.1867065429688, 229.31919860839844, 489.3000030517578),
        (761.0622253417969, 234.66256713867188, 488.8999938964844),
        (745.5621337890625, 236.66632080078125, 488.6999969482422),
        (705.0690612792969, 221.7494354248047, 488.8000030517578),
        (650.4849700927734, 203.82691955566406, 489.0),
        (626.1594696044922, 195.0326385498047, 489.1000061035156),
        (580.9941101074219, 182.11952209472656, 489.3999938964844),
        (547.8431854248047, 170.98751831054688, 489.8000030517578),
        (525.59423828125, 156.6272430419922, 490.0),
        (507.4242706298828, 140.81979370117188, 490.1999969482422),
        (482.13462829589844, 110.54075622558594, 490.6000061035156),
        (472.19676208496094, 97.73895263671875, 490.8000030517578),
        (455.5100555419922, 81.59756469726562, 491.0),
        (437.340087890625, 69.24104309082031, 491.1999969482422),
        (415.01698303222656, 58.66563415527344, 491.5),
        (392.1747283935547, 53.43359375, 491.6999969482422),
        (349.9017333984375, 51.98643493652344, 492.0),
        (325.8728790283203, 53.43359375, 492.1000061035156),
        (300.80572509765625, 55.99395751953125, 492.0),
        (208.91758728027344, 59.778839111328125, 491.8999938964844),
        (185.70452880859375, 57.88639831542969, 491.8999938964844),
        (163.60391235351562, 52.65435791015625, 491.8999938964844),
        (136.8310089111328, 44.30535888671875, 491.8999938964844),
        (108.12986755371094, 32.171478271484375, 491.8999938964844),
        (76.23971557617188, 20.594192504882812, 491.8999938964844),
        (66.22769165039062, 18.813079833984375, 491.8999938964844),
        (24.622161865234375, 19.703643798828125, 491.8999938964844),
        (17.354171752929688, 18.590438842773438, 491.8999938964844),
        (11.791946411132812, 16.475357055664062, 491.8999938964844),
        (4.3014678955078125, 12.133880615234375, 491.8999938964844),
        (0.0, 0.0, 491.6999969482422)
    ]

    # Set maximum distance threshold
    max_dist = 30.0

    # Fill gaps
    filled_coords = fill_coordinate_gaps(sample_coords, max_dist)

    # Print results
    print(f"Original number of points: {len(sample_coords)}")
    print(f"After filling gaps: {len(filled_coords)} points")

    for i, coord in enumerate(filled_coords):
        print(coord)